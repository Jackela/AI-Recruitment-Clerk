# AI Recruitment Clerk - Debug Configuration
# Optimized for local development and debugging

services:
  # Infrastructure Services (Same as production)
  mongodb:
    image: mongo:7.0-jammy
    container_name: ai-recruitment-mongodb-debug
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD:-devpassword123}
      MONGO_INITDB_DATABASE: ai-recruitment
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data_debug:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ai-recruitment-debug-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  nats:
    image: nats:2.10-alpine
    container_name: ai-recruitment-nats-debug
    restart: unless-stopped
    command: 
      - "--jetstream"
      - "--debug"
    ports:
      - "4222:4222"
      - "6222:6222"
      - "8222:8222"
    networks:
      - ai-recruitment-debug-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "4222"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  # Backend Gateway (Debug mode)
  app-gateway:
    build:
      context: .
      dockerfile: apps/app-gateway/Dockerfile
      args:
        NODE_ENV: development
    container_name: ai-recruitment-gateway-debug
    restart: unless-stopped
    environment:
      PORT: 3000
      NODE_ENV: development
      NATS_URL: nats://nats:4222
      JWT_SECRET: ${JWT_SECRET:-development_secret_key_change_in_production}
      MONGO_URL: mongodb://admin:${MONGODB_ROOT_PASSWORD:-devpassword123}@mongodb:27017/ai-recruitment?authSource=admin
      MONGODB_URL: mongodb://admin:${MONGODB_ROOT_PASSWORD:-devpassword123}@mongodb:27017/ai-recruitment?authSource=admin
      DISABLE_REDIS: "true"
      USE_REDIS_CACHE: "false"
      GEMINI_API_KEY: ${GEMINI_API_KEY:-demo_key}
      DEBUG_LOGS: "true"
    ports:
      - "3000:3000"
    depends_on:
      mongodb:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - ai-recruitment-debug-network
    volumes:
      - uploads_data_debug:/app/uploads
      # Optional: mount source for hot reload (if needed)
      # - ./apps/app-gateway/src:/app/src
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s

  # Skip other microservices for faster startup during debugging
  # Uncomment as needed

  # Frontend (Development build)
  ai-recruitment-frontend:
    build:
      context: .
      dockerfile: apps/ai-recruitment-frontend/Dockerfile
      args:
        BUILD_CONFIGURATION: development
    container_name: ai-recruitment-frontend-debug
    restart: unless-stopped
    ports:
      - "4200:80"
    depends_on:
      app-gateway:
        condition: service_healthy
    networks:
      - ai-recruitment-debug-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s

# Networks
networks:
  ai-recruitment-debug-network:
    driver: bridge
    name: ai-recruitment-debug-network

# Volumes
volumes:
  mongodb_data_debug:
    name: ai-recruitment-mongodb-data-debug
  uploads_data_debug:
    name: ai-recruitment-uploads-data-debug