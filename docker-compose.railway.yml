# Railway专用Docker Compose配置
# 适配Railway的容器化部署需求

version: '3.8'

services:
  # 数据库服务 (Railway托管)
  mongodb:
    image: mongo:7.0-jammy
    container_name: ai-recruitment-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-ai-recruitment}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: ai-recruitment-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # 消息队列
  nats:
    image: nats:2.10-alpine
    container_name: ai-recruitment-nats
    restart: unless-stopped
    command: ["--jetstream", "--auth=${NATS_AUTH_TOKEN}"]
    ports:
      - "4222:4222"
      - "6222:6222"
      - "8222:8222"
    volumes:
      - nats_data:/data

  # 主应用网关
  app-gateway:
    build:
      context: .
      dockerfile: apps/app-gateway/Dockerfile
      args:
        NODE_ENV: production
    container_name: ai-recruitment-gateway
    restart: unless-stopped
    environment:
      PORT: ${PORT:-3000}
      NODE_ENV: production
      MONGODB_URL: mongodb://${MONGODB_ROOT_USER:-admin}:${MONGODB_ROOT_PASSWORD}@mongodb:27017/${MONGODB_DATABASE:-ai-recruitment}?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      NATS_URL: nats://nats:4222
      NATS_AUTH_TOKEN: ${NATS_AUTH_TOKEN}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    ports:
      - "${PORT:-3000}:3000"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_started
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 微服务组件
  jd-extractor-svc:
    build:
      context: .
      dockerfile: apps/jd-extractor-svc/Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NATS_URL: nats://nats:4222
      NATS_AUTH_TOKEN: ${NATS_AUTH_TOKEN}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    depends_on:
      nats:
        condition: service_started

  resume-parser-svc:
    build:
      context: .
      dockerfile: apps/resume-parser-svc/Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NATS_URL: nats://nats:4222
      NATS_AUTH_TOKEN: ${NATS_AUTH_TOKEN}
      MONGODB_URL: mongodb://${MONGODB_ROOT_USER:-admin}:${MONGODB_ROOT_PASSWORD}@mongodb:27017/${MONGODB_DATABASE:-ai-recruitment}?authSource=admin
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    depends_on:
      mongodb:
        condition: service_healthy
      nats:
        condition: service_started

  scoring-engine-svc:
    build:
      context: .
      dockerfile: apps/scoring-engine-svc/Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NATS_URL: nats://nats:4222
      NATS_AUTH_TOKEN: ${NATS_AUTH_TOKEN}
      MONGODB_URL: mongodb://${MONGODB_ROOT_USER:-admin}:${MONGODB_ROOT_PASSWORD}@mongodb:27017/${MONGODB_DATABASE:-ai-recruitment}?authSource=admin
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    depends_on:
      mongodb:
        condition: service_healthy
      nats:
        condition: service_started

  report-generator-svc:
    build:
      context: .
      dockerfile: apps/report-generator-svc/Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NATS_URL: nats://nats:4222
      NATS_AUTH_TOKEN: ${NATS_AUTH_TOKEN}
      MONGODB_URL: mongodb://${MONGODB_ROOT_USER:-admin}:${MONGODB_ROOT_PASSWORD}@mongodb:27017/${MONGODB_DATABASE:-ai-recruitment}?authSource=admin
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    depends_on:
      mongodb:
        condition: service_healthy
      nats:
        condition: service_started

  # 前端应用
  ai-recruitment-frontend:
    build:
      context: .
      dockerfile: apps/ai-recruitment-frontend/Dockerfile
    restart: unless-stopped
    ports:
      - "4200:80"
    depends_on:
      app-gateway:
        condition: service_healthy

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  nats_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local