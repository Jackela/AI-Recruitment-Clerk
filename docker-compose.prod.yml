# AI Recruitment Clerk - Production Docker Compose
# 生产环境Docker容器编排配置

version: '3.8'

services:
  # MongoDB数据库 (生产配置)
  mongodb:
    image: mongo:7.0-jammy
    container_name: ai-recruitment-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ai-recruitment
    ports:
      - "127.0.0.1:27017:27017"  # 仅本地访问
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - ai-recruitment-network
    command: mongod --auth --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # NATS消息队列
  nats:
    image: nats:2.10-alpine
    container_name: ai-recruitment-nats
    restart: unless-stopped
    command: 
      - "--jetstream"
    ports:
      - "127.0.0.1:4222:4222"
    volumes:
      - nats_data:/data
    networks:
      - ai-recruitment-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "4222"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 应用网关
  app-gateway:
    build:
      context: .
      dockerfile: apps/app-gateway/Dockerfile
    container_name: ai-recruitment-gateway
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      NATS_URL: nats://nats:4222
      MONGODB_URL: mongodb://admin:${MONGODB_ROOT_PASSWORD}@mongodb:27017/ai-recruitment?authSource=admin
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      ALIPAY_APP_ID: ${ALIPAY_APP_ID}
      ALIPAY_PRIVATE_KEY: ${ALIPAY_PRIVATE_KEY}
      QUESTIONNAIRE_URL: ${QUESTIONNAIRE_URL}
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      mongodb:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - ai-recruitment-network
    volumes:
      - uploads_data:/app/uploads
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  # 前端应用
  ai-recruitment-frontend:
    build:
      context: .
      dockerfile: apps/ai-recruitment-frontend/Dockerfile
    container_name: ai-recruitment-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      app-gateway:
        condition: service_healthy
    networks:
      - ai-recruitment-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

# 网络配置
networks:
  ai-recruitment-network:
    driver: bridge
    name: ai-recruitment-prod-network

# 数据卷配置
volumes:
  mongodb_data:
    name: ai-recruitment-mongodb-prod-data
  mongodb_config:
    name: ai-recruitment-mongodb-prod-config
  nats_data:
    name: ai-recruitment-nats-prod-data
  uploads_data:
    name: ai-recruitment-uploads-prod-data