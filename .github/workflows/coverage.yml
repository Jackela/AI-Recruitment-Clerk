name: 📊 Test Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write

env:
  NODE_VERSION: '20'
  CI: true

jobs:
  coverage:
    name: 📊 Generate Coverage Report
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better coverage analysis

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci --legacy-peer-deps --prefer-offline || npm install --legacy-peer-deps
          echo "✅ Dependencies installed"

      - name: 🧪 Run Tests with Coverage
        run: |
          echo "🧪 Running tests with coverage reporting..."
          npm run test:coverage || true
        env:
          CI: true

      - name: 📊 Generate Coverage Summary
        id: coverage
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE=$(node -e "
              const fs = require('fs');
              const summary = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = summary.total;
              console.log(JSON.stringify({
                lines: total.lines.pct,
                statements: total.statements.pct,
                functions: total.functions.pct,
                branches: total.branches.pct
              }));
            ")
            echo "coverage_json=$COVERAGE" >> $GITHUB_OUTPUT
            echo "📊 Coverage Summary: $COVERAGE"
          else
            echo "⚠️ No coverage summary found"
            echo "coverage_json={}" >> $GITHUB_OUTPUT
          fi

      - name: 📈 Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: ai-recruitment-clerk
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: 📊 Comment PR with Coverage
        uses: actions/github-script@v8
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            let coverageComment = '## 📊 Test Coverage Report\n\n';
            
            if (fs.existsSync('coverage/coverage-summary.json')) {
              const summary = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = summary.total;
              
              coverageComment += '| Metric | Coverage | Status |\n';
              coverageComment += '|--------|----------|--------|\n';
              coverageComment += `| **Lines** | ${total.lines.pct}% | ${total.lines.pct >= 80 ? '✅' : '⚠️'} |\n`;
              coverageComment += `| **Statements** | ${total.statements.pct}% | ${total.statements.pct >= 80 ? '✅' : '⚠️'} |\n`;
              coverageComment += `| **Functions** | ${total.functions.pct}% | ${total.functions.pct >= 80 ? '✅' : '⚠️'} |\n`;
              coverageComment += `| **Branches** | ${total.branches.pct}% | ${total.branches.pct >= 80 ? '✅' : '⚠️'} |\n\n`;
              
              if (total.lines.pct >= 90) {
                coverageComment += '🎉 **Excellent coverage!** Keep up the great work!\n';
              } else if (total.lines.pct >= 80) {
                coverageComment += '✅ **Good coverage.** Consider adding more tests for critical paths.\n';
              } else {
                coverageComment += '⚠️ **Coverage below target (80%).** Please add tests for new code.\n';
              }
            } else {
              coverageComment += '⚠️ Coverage data not available. Tests may not have run successfully.\n';
            }
            
            coverageComment += '\n---\n*📊 Generated by Coverage Workflow*';
            
            // Find existing coverage comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Test Coverage Report')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: coverageComment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: coverageComment
              });
            }

      - name: 📦 Upload Coverage Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-${{ github.run_id }}
          path: |
            coverage/
            !coverage/tmp
          retention-days: 14

      - name: 🚫 Fail on Low Coverage
        if: github.event_name == 'pull_request'
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            LINES_PCT=$(node -e "console.log(JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8')).total.lines.pct)")
            echo "📊 Line coverage: $LINES_PCT%"
            
            if (( $(echo "$LINES_PCT < 70" | bc -l) )); then
              echo "❌ Coverage is below 70% threshold"
              echo "::warning::Test coverage ($LINES_PCT%) is below minimum threshold (70%)"
              # Uncomment below to make this a hard failure
              # exit 1
            else
              echo "✅ Coverage meets minimum threshold"
            fi
          fi
