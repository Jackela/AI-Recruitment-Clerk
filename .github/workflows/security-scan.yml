name: Security Scan

on:
  push:
    branches: [ main, develop, security/* ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    services:
      mongodb:
        image: mongo:7.0-jammy
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: testpassword123
          MONGO_INITDB_DATABASE: ai-recruitment-test
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch full history for better security scanning
        fetch-depth: 0

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci --legacy-peer-deps
        
    - name: Install security tools
      run: |
        # Install additional security scanning tools
        npm install -g @cyclonedx/cyclonedx-npm
        npm install -g retire
        npm install -g eslint-plugin-security
        
    - name: Lint for security issues
      run: |
        npx eslint . --ext .ts,.js --config .eslintrc.json --quiet || true
        
    - name: Run Retire.js vulnerability scanner
      run: |
        retire --outputformat json --outputpath retire-report.json --severity medium || true
        
    - name: Generate Software Bill of Materials (SBOM)
      run: |
        cyclonedx-npm --output-format json --output-file sbom.json
        
    - name: Run npm audit
      run: |
        npm audit --audit-level moderate --json > npm-audit.json || true
        
    - name: Run security unit tests
      run: |
        npm test -- --testPathPattern=security --coverage --coverageReporters=json-summary
      env:
        NODE_ENV: test
        MONGODB_URL: mongodb://admin:testpassword123@localhost:27017/ai-recruitment-test?authSource=admin
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret-with-sufficient-length-for-security-testing-in-ci-pipeline
        CSRF_SECRET: test-csrf-secret-for-security-testing-in-ci-pipeline
        
    - name: Run security integration tests
      run: |
        npm run test:integration || true
      env:
        NODE_ENV: test
        MONGODB_URL: mongodb://admin:testpassword123@localhost:27017/ai-recruitment-test?authSource=admin
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret-with-sufficient-length-for-security-testing-in-ci-pipeline
        CSRF_SECRET: test-csrf-secret-for-security-testing-in-ci-pipeline
        
    - name: Run custom security scan
      run: |
        chmod +x ./scripts/security-scan.sh
        ./scripts/security-scan.sh
        
    - name: Check for secrets in code
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Run Semgrep security analysis
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/nodejs
          p/typescript
          p/docker
        generateSarif: "1"
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        
    - name: Upload Semgrep SARIF to GitHub
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif
        
    - name: Run Docker security scan (if Dockerfile exists)
      if: hashFiles('**/Dockerfile*') != ''
      run: |
        # Install Docker security scanner
        docker run --rm -v $(pwd):/workspace \
          aquasec/trivy fs --format sarif --output trivy-results.sarif /workspace
        
    - name: Upload Docker scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('**/Dockerfile*') != ''
      with:
        sarif_file: trivy-results.sarif
        
    - name: Analyze security test results
      run: |
        echo "## Security Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Parse npm audit results
        if [ -f npm-audit.json ]; then
          HIGH_VULNS=$(jq '.metadata.vulnerabilities.high // 0' npm-audit.json)
          CRITICAL_VULNS=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit.json)
          echo "### Dependency Vulnerabilities" >> security-summary.md
          echo "- Critical: $CRITICAL_VULNS" >> security-summary.md
          echo "- High: $HIGH_VULNS" >> security-summary.md
          echo "" >> security-summary.md
        fi
        
        # Parse retire.js results
        if [ -f retire-report.json ]; then
          RETIRE_ISSUES=$(jq '. | length' retire-report.json)
          echo "### Retire.js Vulnerabilities: $RETIRE_ISSUES" >> security-summary.md
          echo "" >> security-summary.md
        fi
        
        # Check test results
        if [ -f coverage/coverage-summary.json ]; then
          COVERAGE=$(jq '.total.lines.pct' coverage/coverage-summary.json)
          echo "### Security Test Coverage: $COVERAGE%" >> security-summary.md
          echo "" >> security-summary.md
        fi
        
        echo "### Recommendations" >> security-summary.md
        echo "- Address all critical and high-severity vulnerabilities" >> security-summary.md
        echo "- Maintain security test coverage above 80%" >> security-summary.md
        echo "- Review and update dependencies regularly" >> security-summary.md
        echo "- Monitor security alerts and advisories" >> security-summary.md
        
    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results-${{ matrix.node-version }}
        path: |
          security_scan_report_*.txt
          npm-audit.json
          retire-report.json
          sbom.json
          security-summary.md
          coverage/
        retention-days: 30
        
    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## üîê Security Scan Results\n\n' + summary
            });
          } catch (error) {
            console.log('Security summary file not found or error posting comment');
          }
          
    - name: Fail if critical vulnerabilities found
      run: |
        if [ -f npm-audit.json ]; then
          CRITICAL_VULNS=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit.json)
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found: $CRITICAL_VULNS"
            echo "Please address critical vulnerabilities before merging."
            exit 1
          fi
        fi
        
        # Check for high-severity issues that should block deployment
        if [ -f security_scan_report_*.txt ]; then
          if grep -q "Tests Failed: [1-9]" security_scan_report_*.txt; then
            echo "‚ùå Security scan failed with critical issues"
            echo "Please address all security test failures before merging."
            exit 1
          fi
        fi
        
        echo "‚úÖ Security scan passed - no critical issues found"

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: critical
        allow-ghsas: GHSA-example-1234-5678  # Add allowed GHSAs if needed
        deny-licenses: GPL-2.0, LGPL-2.0  # Block copyleft licenses if needed
        
  security-policy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for SECURITY.md
      run: |
        if [ ! -f SECURITY.md ]; then
          echo "‚ö†Ô∏è  SECURITY.md file not found"
          echo "Consider adding a security policy file"
          exit 0
        else
          echo "‚úÖ Security policy file found"
        fi
        
    - name: Check for security contact
      run: |
        if [ -f SECURITY.md ]; then
          if grep -i "security@\|report.*security\|contact" SECURITY.md > /dev/null; then
            echo "‚úÖ Security contact information found"
          else
            echo "‚ö†Ô∏è  Consider adding security contact information"
          fi
        fi