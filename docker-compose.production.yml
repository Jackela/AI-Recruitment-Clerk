# AI Recruitment Clerk - Production Docker Compose Configuration
# Secure production deployment with secrets management

version: '3.8'

# Define secrets for secure credential management
secrets:
  mongodb_root_password:
    external: true
    name: mongodb_root_password
  mongodb_app_password:
    external: true  
    name: mongodb_app_password
  jwt_secret:
    external: true
    name: jwt_secret
  jwt_refresh_secret:
    external: true
    name: jwt_refresh_secret
  encryption_master_key:
    external: true
    name: encryption_master_key
  gemini_api_key:
    external: true
    name: gemini_api_key

services:
  # Infrastructure Services
  mongodb:
    image: mongo:7.0-jammy
    container_name: ai-recruitment-mongodb-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongodb_root_password
      MONGO_INITDB_DATABASE: ai-recruitment
    ports:
      - "27017:27017"
    secrets:
      - mongodb_root_password
    volumes:
      - mongodb_data:/data/db
      - ./secrets/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ai-recruitment-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Security hardening
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp

  nats:
    image: nats:2.10-alpine
    container_name: ai-recruitment-nats-prod
    restart: unless-stopped
    command: 
      - "--jetstream"
      - "--cluster_name=ai-recruitment"
      - "--max_mem=512MB"
      - "--max_file=2GB"
    ports:
      - "4222:4222"
      - "6222:6222"  
      - "8222:8222"
    networks:
      - ai-recruitment-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    # Security hardening
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Backend Microservices
  app-gateway:
    build:
      context: .
      dockerfile: apps/app-gateway/Dockerfile.production
    container_name: ai-recruitment-gateway-prod
    restart: unless-stopped
    environment:
      PORT: 3000
      NODE_ENV: production
      NATS_URL: nats://nats:4222
      MONGODB_URL: mongodb://ai-recruitment-app:${MONGODB_APP_PASSWORD}@mongodb:27017/ai-recruitment?authSource=ai-recruitment
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      JWT_REFRESH_SECRET_FILE: /run/secrets/jwt_refresh_secret
      ENCRYPTION_MASTER_KEY_FILE: /run/secrets/encryption_master_key
      GEMINI_API_KEY_FILE: /run/secrets/gemini_api_key
      # Security settings
      ENABLE_HELMET: "true"
      ENABLE_CSRF: "true"
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      # Logging
      LOG_LEVEL: info
      LOG_FORMAT: json
    ports:
      - "3000:3000"
    secrets:
      - jwt_secret
      - jwt_refresh_secret
      - encryption_master_key
      - gemini_api_key
    depends_on:
      mongodb:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - ai-recruitment-network
    volumes:
      - uploads_data:/app/uploads
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Security hardening
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/uploads

  jd-extractor-svc:
    build:
      context: .
      dockerfile: apps/jd-extractor-svc/Dockerfile.production
    container_name: ai-recruitment-jd-extractor-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NATS_URL: nats://nats:4222
      GEMINI_API_KEY_FILE: /run/secrets/gemini_api_key
      LOG_LEVEL: info
    secrets:
      - gemini_api_key
    depends_on:
      nats:
        condition: service_healthy
    networks:
      - ai-recruitment-network
    healthcheck:
      test: ["CMD", "pgrep", "node"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Security hardening
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  resume-parser-svc:
    build:
      context: .
      dockerfile: apps/resume-parser-svc/Dockerfile.production
    container_name: ai-recruitment-resume-parser-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NATS_URL: nats://nats:4222
      MONGODB_URL: mongodb://ai-recruitment-app:${MONGODB_APP_PASSWORD}@mongodb:27017/ai-recruitment?authSource=ai-recruitment
      GEMINI_API_KEY_FILE: /run/secrets/gemini_api_key
      ENCRYPTION_MASTER_KEY_FILE: /run/secrets/encryption_master_key
      LOG_LEVEL: info
    secrets:
      - gemini_api_key
      - encryption_master_key
    depends_on:
      mongodb:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - ai-recruitment-network
    healthcheck:
      test: ["CMD", "pgrep", "node"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Security hardening
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  scoring-engine-svc:
    build:
      context: .
      dockerfile: apps/scoring-engine-svc/Dockerfile.production
    container_name: ai-recruitment-scoring-engine-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NATS_URL: nats://nats:4222
      MONGODB_URL: mongodb://ai-recruitment-app:${MONGODB_APP_PASSWORD}@mongodb:27017/ai-recruitment?authSource=ai-recruitment
      GEMINI_API_KEY_FILE: /run/secrets/gemini_api_key
      LOG_LEVEL: info
    secrets:
      - gemini_api_key
    depends_on:
      mongodb:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - ai-recruitment-network
    healthcheck:
      test: ["CMD", "pgrep", "node"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Security hardening
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  report-generator-svc:
    build:
      context: .
      dockerfile: apps/report-generator-svc/Dockerfile.production
    container_name: ai-recruitment-report-generator-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NATS_URL: nats://nats:4222
      MONGODB_URL: mongodb://ai-recruitment-app:${MONGODB_APP_PASSWORD}@mongodb:27017/ai-recruitment?authSource=ai-recruitment
      GEMINI_API_KEY_FILE: /run/secrets/gemini_api_key
      LOG_LEVEL: info
    secrets:
      - gemini_api_key
    depends_on:
      mongodb:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - ai-recruitment-network
    healthcheck:
      test: ["CMD", "pgrep", "node"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Security hardening
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Frontend Application with production optimizations
  ai-recruitment-frontend:
    build:
      context: .
      dockerfile: apps/ai-recruitment-frontend/Dockerfile.production
      args:
        - BUILD_ENV=production
    container_name: ai-recruitment-frontend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
    ports:
      - "4200:80"
    depends_on:
      app-gateway:
        condition: service_healthy
    networks:
      - ai-recruitment-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Security hardening
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run

# Networks with enhanced security
networks:
  ai-recruitment-network:
    driver: bridge
    name: ai-recruitment-production-network
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    ipam:
      config:
        - subnet: 172.20.0.0/24

# Volumes with proper mounting
volumes:
  mongodb_data:
    name: ai-recruitment-mongodb-production-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/ai-recruitment/mongodb
  uploads_data:
    name: ai-recruitment-uploads-production-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/ai-recruitment/uploads