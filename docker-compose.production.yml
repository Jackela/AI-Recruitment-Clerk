# AI Recruitment Clerk - Production Docker Compose Configuration
# Secure production orchestration with proper secrets management

services:
  # Infrastructure Services
  mongodb:
    image: mongo:7.0-jammy
    container_name: ai-recruitment-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-ai-recruitment}
    ports:
      - "127.0.0.1:27017:27017"  # Bind to localhost only
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./config/mongod.conf:/etc/mongod.conf:ro
    networks:
      - ai-recruitment-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  redis:
    image: redis:7-alpine
    container_name: ai-recruitment-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --save 900 1
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    volumes:
      - redis_data:/data
    networks:
      - ai-recruitment-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  nats:
    image: nats:2.10-alpine
    container_name: ai-recruitment-nats
    restart: unless-stopped
    command: 
      - "--jetstream"
      - "--auth=${NATS_AUTH_TOKEN}"
    ports:
      - "127.0.0.1:4222:4222"  # Client connections
      - "127.0.0.1:6222:6222"  # Cluster connections
      - "127.0.0.1:8222:8222"  # HTTP management
    volumes:
      - nats_data:/data
    networks:
      - ai-recruitment-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "4222"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true

  # Backend Microservices
  app-gateway:
    build:
      context: .
      dockerfile: apps/app-gateway/Dockerfile
      args:
        NODE_ENV: production
    container_name: ai-recruitment-gateway
    restart: unless-stopped
    environment:
      # Application Configuration
      PORT: 3000
      NODE_ENV: production
      
      # Database Configuration
      MONGODB_URL: mongodb://${MONGODB_ROOT_USER:-admin}:${MONGODB_ROOT_PASSWORD}@mongodb:27017/${MONGODB_DATABASE:-ai-recruitment}?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      
      # Message Queue Configuration
      NATS_URL: nats://nats:4222
      NATS_AUTH_TOKEN: ${NATS_AUTH_TOKEN}
      
      # Security Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      BCRYPT_SALT_ROUNDS: ${BCRYPT_SALT_ROUNDS:-12}
      
      # API Configuration
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      
      # Security Features
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      SESSION_SECRET: ${SESSION_SECRET}
      CSRF_SECRET: ${CSRF_SECRET}
      
      # Monitoring
      LOG_LEVEL: ${LOG_LEVEL:-warn}
      ENABLE_REQUEST_LOGGING: ${ENABLE_REQUEST_LOGGING:-false}
    ports:
      - "${GATEWAY_PORT:-3000}:3000"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - ai-recruitment-network
    volumes:
      - uploads_data:/app/uploads:rw
      - logs_data:/app/logs:rw
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"

  jd-extractor-svc:
    build:
      context: .
      dockerfile: apps/jd-extractor-svc/Dockerfile
      args:
        NODE_ENV: production
    container_name: ai-recruitment-jd-extractor
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NATS_URL: nats://nats:4222
      NATS_AUTH_TOKEN: ${NATS_AUTH_TOKEN}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-warn}
    depends_on:
      nats:
        condition: service_healthy
    networks:
      - ai-recruitment-network
    volumes:
      - logs_data:/app/logs:rw
    healthcheck:
      test: ["CMD", "pgrep", "node"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"

  resume-parser-svc:
    build:
      context: .
      dockerfile: apps/resume-parser-svc/Dockerfile
      args:
        NODE_ENV: production
    container_name: ai-recruitment-resume-parser
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NATS_URL: nats://nats:4222
      NATS_AUTH_TOKEN: ${NATS_AUTH_TOKEN}
      MONGODB_URL: mongodb://${MONGODB_ROOT_USER:-admin}:${MONGODB_ROOT_PASSWORD}@mongodb:27017/${MONGODB_DATABASE:-ai-recruitment}?authSource=admin
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-warn}
    depends_on:
      mongodb:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - ai-recruitment-network
    volumes:
      - logs_data:/app/logs:rw
    healthcheck:
      test: ["CMD", "pgrep", "node"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"

  scoring-engine-svc:
    build:
      context: .
      dockerfile: apps/scoring-engine-svc/Dockerfile
      args:
        NODE_ENV: production
    container_name: ai-recruitment-scoring-engine
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NATS_URL: nats://nats:4222
      NATS_AUTH_TOKEN: ${NATS_AUTH_TOKEN}
      MONGODB_URL: mongodb://${MONGODB_ROOT_USER:-admin}:${MONGODB_ROOT_PASSWORD}@mongodb:27017/${MONGODB_DATABASE:-ai-recruitment}?authSource=admin
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-warn}
    depends_on:
      mongodb:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - ai-recruitment-network
    volumes:
      - logs_data:/app/logs:rw
    healthcheck:
      test: ["CMD", "pgrep", "node"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"

  report-generator-svc:
    build:
      context: .
      dockerfile: apps/report-generator-svc/Dockerfile
      args:
        NODE_ENV: production
    container_name: ai-recruitment-report-generator
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NATS_URL: nats://nats:4222
      NATS_AUTH_TOKEN: ${NATS_AUTH_TOKEN}
      MONGODB_URL: mongodb://${MONGODB_ROOT_USER:-admin}:${MONGODB_ROOT_PASSWORD}@mongodb:27017/${MONGODB_DATABASE:-ai-recruitment}?authSource=admin
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-warn}
    depends_on:
      mongodb:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - ai-recruitment-network
    volumes:
      - logs_data:/app/logs:rw
    healthcheck:
      test: ["CMD", "pgrep", "node"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"

  # Frontend Application
  ai-recruitment-frontend:
    build:
      context: .
      dockerfile: apps/ai-recruitment-frontend/Dockerfile
      args:
        NODE_ENV: production
    container_name: ai-recruitment-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-4200}:80"
    depends_on:
      app-gateway:
        condition: service_healthy
    networks:
      - ai-recruitment-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run

# Networks
networks:
  ai-recruitment-network:
    driver: bridge
    name: ai-recruitment-network
    internal: false
    driver_opts:
      com.docker.network.bridge.name: "ai-recruit-br0"

# Volumes
volumes:
  mongodb_data:
    name: ai-recruitment-mongodb-data
    driver: local
  redis_data:
    name: ai-recruitment-redis-data
    driver: local
  nats_data:
    name: ai-recruitment-nats-data
    driver: local
  uploads_data:
    name: ai-recruitment-uploads-data
    driver: local
  logs_data:
    name: ai-recruitment-logs-data
    driver: local