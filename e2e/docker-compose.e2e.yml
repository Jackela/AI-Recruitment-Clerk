
services:
  # MongoDB for E2E testing
  mongodb-e2e:
    image: mongo:7
    container_name: mongodb-e2e
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: testuser
      MONGO_INITDB_ROOT_PASSWORD: testpass123
      MONGO_INITDB_DATABASE: ai-recruitment-test
    volumes:
      - mongodb-e2e-data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - e2e-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/ai-recruitment-test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for caching in E2E testing
  redis-e2e:
    image: redis:7-alpine
    container_name: redis-e2e
    ports:
      - "6380:6379"
    volumes:
      - redis-e2e-data:/data
      - ./config/redis-test.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - e2e-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # NATS for message bus in E2E testing
  nats-e2e:
    image: nats:latest
    container_name: nats-e2e
    ports:
      - "4223:4222"
      - "8223:8222"  # HTTP monitoring
    networks:
      - e2e-network
    command: ["--js", "--http_port", "8222"]
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3

  # App Gateway for E2E testing
  app-gateway-e2e:
    build:
      context: ..
      dockerfile: apps/app-gateway/Dockerfile
    container_name: app-gateway-e2e
    ports:
      - "3001:3000"
    environment:
      NODE_ENV: test
      MONGODB_URL: mongodb://testuser:testpass123@mongodb-e2e:27017/ai-recruitment-test?authSource=admin
      REDIS_URL: redis://redis-e2e:6379
      NATS_URL: nats://nats-e2e:4222
      JWT_SECRET: test-jwt-secret-key-for-e2e
      API_PORT: 3000
      GEMINI_API_KEY: test-gemini-key
    networks:
      - e2e-network
    depends_on:
      mongodb-e2e:
        condition: service_healthy
      redis-e2e:
        condition: service_healthy
      nats-e2e:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # JD Extractor Service for E2E testing
  jd-extractor-e2e:
    build:
      context: ..
      dockerfile: apps/jd-extractor-svc/Dockerfile
    container_name: jd-extractor-e2e
    ports:
      - "3002:3000"
    environment:
      NODE_ENV: test
      NATS_URL: nats://nats-e2e:4222
      GEMINI_API_KEY: test-gemini-key
      API_PORT: 3000
    networks:
      - e2e-network
    depends_on:
      nats-e2e:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Resume Parser Service for E2E testing
  resume-parser-e2e:
    build:
      context: ..
      dockerfile: apps/resume-parser-svc/Dockerfile
    container_name: resume-parser-e2e
    ports:
      - "3003:3000"
    environment:
      NODE_ENV: test
      MONGODB_URL: mongodb://testuser:testpass123@mongodb-e2e:27017/ai-recruitment-test?authSource=admin
      NATS_URL: nats://nats-e2e:4222
      GEMINI_API_KEY: test-gemini-key
      API_PORT: 3000
    networks:
      - e2e-network
    depends_on:
      mongodb-e2e:
        condition: service_healthy
      nats-e2e:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Scoring Engine Service for E2E testing
  scoring-engine-e2e:
    build:
      context: ..
      dockerfile: apps/scoring-engine-svc/Dockerfile
    container_name: scoring-engine-e2e
    ports:
      - "3004:3000"
    environment:
      NODE_ENV: test
      NATS_URL: nats://nats-e2e:4222
      GEMINI_API_KEY: test-gemini-key
      API_PORT: 3000
    networks:
      - e2e-network
    depends_on:
      nats-e2e:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Report Generator Service for E2E testing
  report-generator-e2e:
    build:
      context: ..
      dockerfile: apps/report-generator-svc/Dockerfile
    container_name: report-generator-e2e
    ports:
      - "3005:3000"
    environment:
      NODE_ENV: test
      MONGODB_URL: mongodb://testuser:testpass123@mongodb-e2e:27017/ai-recruitment-test?authSource=admin
      NATS_URL: nats://nats-e2e:4222
      GEMINI_API_KEY: test-gemini-key
      API_PORT: 3000
    networks:
      - e2e-network
    depends_on:
      mongodb-e2e:
        condition: service_healthy
      nats-e2e:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  mongodb-e2e-data:
    driver: local
  redis-e2e-data:
    driver: local

networks:
  e2e-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16