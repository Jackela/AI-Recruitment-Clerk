# HAProxy Configuration for AI Recruitment Clerk
# High Availability Load Balancer with SSL Termination

global
    maxconn 4096
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # SSL Configuration
    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option http-server-close
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 10s
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Statistics and Monitoring
listen stats
    bind *:8404
    stats enable
    stats uri /haproxy?stats
    stats refresh 30s
    stats admin if TRUE
    stats auth ${STATS_USERNAME}:${STATS_PASSWORD}
    stats show-legends
    stats show-desc "AI Recruitment Clerk Load Balancer"

# Frontend for HTTP (Redirect to HTTPS)
frontend http_frontend
    bind *:80
    mode http
    
    # Redirect all HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }
    
    # Health check endpoint (allow HTTP for load balancer health checks)
    acl is_health_check path_beg /health
    use_backend health_check if is_health_check

# Frontend for HTTPS
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/ai-recruitment.pem
    mode http
    
    # Security Headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    http-response set-header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'"
    
    # Rate Limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 20 }
    
    # ACLs for routing
    acl is_api path_beg /api
    acl is_upload path_beg /upload
    acl is_static path_beg /static /assets /images /css /js
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_health_check path_beg /health
    
    # Routing Rules
    use_backend api_backend if is_api
    use_backend upload_backend if is_upload
    use_backend websocket_backend if is_websocket
    use_backend health_check if is_health_check
    default_backend frontend_backend

# API Backend (Load Balanced)
backend api_backend
    mode http
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Health Check Configuration
    default-server inter 3s rise 2 fall 3 check maxconn 100
    
    # API Gateway Instances
    server gateway-1 app-gateway-1:3000 check
    server gateway-2 app-gateway-2:3000 check
    
    # Connection Limits
    fullconn 2000
    
    # Request/Response Modifications
    http-request set-header X-Forwarded-Proto https
    http-request set-header X-Forwarded-Port 443
    http-response set-header X-Backend-Server %s

# Frontend Backend (Static Content)
backend frontend_backend
    mode http
    balance roundrobin
    option httpchk GET /
    http-check expect status 200
    
    # Frontend Instances
    server frontend-1 frontend-1:80 check
    server frontend-2 frontend-2:80 check
    
    # Static Content Caching
    http-response set-header Cache-Control "public, max-age=3600" if { path_end .css .js .png .jpg .jpeg .gif .ico .woff .woff2 }

# File Upload Backend (Sticky Sessions)
backend upload_backend
    mode http
    balance source
    hash-type consistent
    option httpchk GET /health
    
    # Upload-specific Configuration
    timeout server 300s
    timeout connect 10s
    
    server gateway-1 app-gateway-1:3000 check
    server gateway-2 app-gateway-2:3000 check

# WebSocket Backend
backend websocket_backend
    mode http
    balance source
    hash-type consistent
    option httpchk GET /health
    
    # WebSocket Configuration
    timeout tunnel 1h
    timeout server 1h
    
    server gateway-1 app-gateway-1:3000 check
    server gateway-2 app-gateway-2:3000 check

# Health Check Backend
backend health_check
    mode http
    balance roundrobin
    option httpchk GET /health
    
    server gateway-1 app-gateway-1:3000 check
    server gateway-2 app-gateway-2:3000 check backup

# Maintenance Backend (For maintenance mode)
backend maintenance
    mode http
    errorfile 503 /etc/haproxy/errors/maintenance.http

# Custom Error Pages
errorfile 503 /etc/haproxy/errors/maintenance.http

# Advanced Configuration for Production

# SSL Certificate Management
# Place your SSL certificates in /etc/ssl/certs/
# Certificate should include the full chain: cert + intermediate + root

# Rate Limiting Configuration
# Adjust rates based on your traffic patterns
# Current setting: 20 requests per 10 seconds per IP

# Health Check Configuration
# Health checks run every 3 seconds
# Server marked down after 3 consecutive failures
# Server marked up after 2 consecutive successes

# Session Persistence
# Upload backend uses source IP hashing for session persistence
# WebSocket backend uses source IP for connection stability

# Monitoring and Logging
# Stats interface available at :8404/haproxy?stats
# All requests logged to stdout for analysis
# Health check results logged for troubleshooting

# Security Features
# - HTTPS redirect
# - Security headers
# - Rate limiting
# - SSL/TLS configuration
# - Content Security Policy