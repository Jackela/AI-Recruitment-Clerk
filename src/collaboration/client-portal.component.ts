import { Component, OnInit, OnDestroy, signal, computed, inject, input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Subject, takeUntil } from 'rxjs';\nimport { WebSocketService } from '../services/websocket.service';\nimport { CollaborationService } from '../services/collaboration.service';\nimport { VideoCollaborationService } from '../services/video-collaboration.service';\nimport { NotificationService } from '../services/notification.service';\n\ninterface ClientPortalConfig {\n  clientId: string;\n  clientName: string;\n  companyName: string;\n  logo?: string;\n  brandColors: {\n    primary: string;\n    secondary: string;\n    accent: string;\n  };\n  features: {\n    candidateReview: boolean;\n    liveInterviews: boolean;\n    reports: boolean;\n    messaging: boolean;\n    fileSharing: boolean;\n    videoRecordings: boolean;\n    analytics: boolean;\n  };\n  permissions: ClientPermissions;\n}\n\ninterface ClientPermissions {\n  canViewCandidates: boolean;\n  canRateCandidates: boolean;\n  canCommentOnCandidates: boolean;\n  canScheduleInterviews: boolean;\n  canAccessReports: boolean;\n  canDownloadFiles: boolean;\n  canInviteTeamMembers: boolean;\n  maxTeamMembers: number;\n}\n\ninterface CandidatePresentation {\n  id: string;\n  candidateId: string;\n  candidateName: string;\n  position: string;\n  status: 'pending_review' | 'under_review' | 'shortlisted' | 'rejected' | 'hired';\n  submittedAt: Date;\n  reviewDeadline?: Date;\n  recruiterNotes?: string;\n  documents: CandidateDocument[];\n  evaluations: CandidateEvaluation[];\n  interviewSchedule?: InterviewSchedule[];\n  recommendation: RecruitmentRecommendation;\n  clientFeedback?: ClientFeedback;\n}\n\ninterface CandidateDocument {\n  id: string;\n  type: 'resume' | 'cover_letter' | 'portfolio' | 'certificate' | 'reference';\n  filename: string;\n  url: string;\n  uploadedAt: Date;\n  size: number;\n  annotations?: DocumentAnnotation[];\n}\n\ninterface DocumentAnnotation {\n  id: string;\n  type: 'highlight' | 'note' | 'question' | 'concern';\n  position: { x: number; y: number };\n  content: string;\n  authorId: string;\n  authorName: string;\n  createdAt: Date;\n  resolved: boolean;\n}\n\ninterface CandidateEvaluation {\n  id: string;\n  category: 'technical' | 'soft_skills' | 'experience' | 'cultural_fit' | 'overall';\n  score: number; // 1-10\n  feedback: string;\n  evaluatorId: string;\n  evaluatorName: string;\n  evaluatedAt: Date;\n  criteria: EvaluationCriteria[];\n}\n\ninterface EvaluationCriteria {\n  name: string;\n  score: number;\n  weight: number;\n  comments?: string;\n}\n\ninterface InterviewSchedule {\n  id: string;\n  type: 'phone' | 'video' | 'in_person' | 'technical';\n  scheduledAt: Date;\n  duration: number; // minutes\n  interviewers: InterviewerInfo[];\n  status: 'scheduled' | 'in_progress' | 'completed' | 'cancelled' | 'rescheduled';\n  meetingLink?: string;\n  notes?: string;\n  recording?: {\n    url: string;\n    duration: number;\n    transcript?: string;\n  };\n}\n\ninterface InterviewerInfo {\n  id: string;\n  name: string;\n  role: string;\n  email: string;\n  avatar?: string;\n}\n\ninterface RecruitmentRecommendation {\n  decision: 'recommend' | 'conditional' | 'not_recommend';\n  confidence: number; // 0-100\n  reasoning: string;\n  strengths: string[];\n  concerns: string[];\n  nextSteps: string[];\n  salaryRecommendation?: {\n    min: number;\n    max: number;\n    currency: string;\n    reasoning: string;\n  };\n}\n\ninterface ClientFeedback {\n  id: string;\n  rating: number; // 1-5 stars\n  feedback: string;\n  categories: {\n    technical_skills: number;\n    communication: number;\n    cultural_fit: number;\n    experience: number;\n  };\n  decision: 'approve' | 'reject' | 'request_more_info';\n  submittedAt: Date;\n  submittedBy: string;\n  comments?: ClientComment[];\n}\n\ninterface ClientComment {\n  id: string;\n  content: string;\n  authorId: string;\n  authorName: string;\n  timestamp: Date;\n  type: 'general' | 'question' | 'concern' | 'suggestion';\n  responses?: ClientComment[];\n}\n\ninterface LiveSession {\n  id: string;\n  type: 'candidate_presentation' | 'interview_debrief' | 'status_update';\n  title: string;\n  participants: SessionParticipant[];\n  status: 'scheduled' | 'active' | 'ended';\n  scheduledAt: Date;\n  agenda?: string[];\n  recordings?: SessionRecording[];\n}\n\ninterface SessionParticipant {\n  userId: string;\n  name: string;\n  role: 'client' | 'recruiter' | 'interviewer' | 'candidate';\n  isOnline: boolean;\n  joinedAt?: Date;\n}\n\ninterface SessionRecording {\n  id: string;\n  title: string;\n  duration: number;\n  url: string;\n  thumbnail?: string;\n  createdAt: Date;\n}\n\ninterface PortalAnalytics {\n  overview: {\n    totalCandidates: number;\n    candidatesUnderReview: number;\n    pendingFeedback: number;\n    averageReviewTime: number; // hours\n    clientSatisfactionScore: number;\n  };\n  engagement: {\n    loginFrequency: number; // per week\n    avgSessionDuration: number; // minutes\n    featuresUsed: string[];\n    feedbackResponseRate: number; // percentage\n  };\n  performance: {\n    timeToFeedback: number; // hours\n    decisionSpeed: number; // hours\n    interviewSchedulingTime: number; // hours\n    clientResponseRate: number; // percentage\n  };\n}\n\n@Component({\n  selector: 'app-client-portal',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  template: `\n    <div class=\"client-portal\" [style.--primary-color]=\"config().brandColors.primary\" [style.--secondary-color]=\"config().brandColors.secondary\">\n      <!-- Portal Header -->\n      <header class=\"portal-header\">\n        <div class=\"header-brand\">\n          <img [src]=\"config().logo || '/assets/default-logo.png'\" [alt]=\"config().companyName\" class=\"brand-logo\">\n          <div class=\"brand-info\">\n            <h1 class=\"company-name\">{{ config().companyName }}</h1>\n            <p class=\"portal-subtitle\">Recruitment Collaboration Portal</p>\n          </div>\n        </div>\n        <div class=\"header-actions\">\n          <div class=\"notification-center\">\n            <button class=\"notification-btn\" (click)=\"toggleNotifications()\" [class.has-notifications]=\"unreadNotifications() > 0\">\n              <i class=\"icon-bell\"></i>\n              <span class=\"notification-count\" *ngIf=\"unreadNotifications() > 0\">{{ unreadNotifications() }}</span>\n            </button>\n            <div class=\"notification-dropdown\" *ngIf=\"showNotifications()\" [@slideDown]>\n              <div class=\"notification-header\">\n                <h3>Notifications</h3>\n                <button class=\"mark-all-read\" (click)=\"markAllRead()\">Mark all read</button>\n              </div>\n              <div class=\"notification-list\">\n                <div \n                  *ngFor=\"let notification of recentNotifications()\"\n                  class=\"notification-item\"\n                  [class.unread]=\"notification.status === 'unread'\"\n                  (click)=\"handleNotification(notification)\">\n                  <div class=\"notification-icon\">\n                    <i [class]=\"getNotificationIcon(notification.type)\"></i>\n                  </div>\n                  <div class=\"notification-content\">\n                    <div class=\"notification-title\">{{ notification.title }}</div>\n                    <div class=\"notification-message\">{{ notification.message }}</div>\n                    <div class=\"notification-time\">{{ notification.timestamp | date:'short' }}</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"user-menu\">\n            <button class=\"user-btn\" (click)=\"toggleUserMenu()\">\n              <img [src]=\"currentUser().avatar || '/assets/default-avatar.png'\" [alt]=\"currentUser().name\" class=\"user-avatar\">\n              <span class=\"user-name\">{{ currentUser().name }}</span>\n              <i class=\"icon-chevron-down\"></i>\n            </button>\n            <div class=\"user-dropdown\" *ngIf=\"showUserMenu()\" [@slideDown]>\n              <a href=\"#\" class=\"menu-item\" (click)=\"viewProfile()\">Profile Settings</a>\n              <a href=\"#\" class=\"menu-item\" (click)=\"viewTeam()\">Team Management</a>\n              <a href=\"#\" class=\"menu-item\" (click)=\"viewPreferences()\">Preferences</a>\n              <div class=\"menu-divider\"></div>\n              <a href=\"#\" class=\"menu-item\" (click)=\"logout()\">Sign Out</a>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <!-- Navigation Tabs -->\n      <nav class=\"portal-nav\">\n        <div class=\"nav-tabs\">\n          <button \n            *ngFor=\"let tab of availableTabs()\"\n            class=\"nav-tab\"\n            [class.active]=\"activeTab() === tab.id\"\n            (click)=\"setActiveTab(tab.id)\"\n            [disabled]=\"!tab.enabled\">\n            <i [class]=\"tab.icon\"></i>\n            <span>{{ tab.label }}</span>\n            <span class=\"tab-badge\" *ngIf=\"tab.badge > 0\">{{ tab.badge }}</span>\n          </button>\n        </div>\n        <div class=\"nav-actions\">\n          <button class=\"action-btn\" (click)=\"refreshData()\" [disabled]=\"isLoading()\">\n            <i class=\"icon-refresh\" [class.spinning]=\"isLoading()\"></i>\n            Refresh\n          </button>\n          <button class=\"action-btn primary\" (click)=\"scheduleMeeting()\">\n            <i class=\"icon-calendar\"></i>\n            Schedule Meeting\n          </button>\n        </div>\n      </nav>\n\n      <!-- Main Content Area -->\n      <main class=\"portal-content\">\n        <!-- Candidates Tab -->\n        <div class=\"tab-content\" *ngIf=\"activeTab() === 'candidates'\">\n          <div class=\"content-header\">\n            <h2>Candidate Review</h2>\n            <div class=\"content-filters\">\n              <select [(ngModel)]=\"candidateFilter\" class=\"filter-select\">\n                <option value=\"all\">All Candidates</option>\n                <option value=\"pending\">Pending Review</option>\n                <option value=\"shortlisted\">Shortlisted</option>\n                <option value=\"interviewed\">Interviewed</option>\n              </select>\n              <input type=\"text\" [(ngModel)]=\"searchQuery\" placeholder=\"Search candidates...\" class=\"search-input\">\n            </div>\n          </div>\n          \n          <div class=\"candidates-grid\">\n            <div \n              *ngFor=\"let candidate of filteredCandidates(); trackBy: trackByCandidateId\"\n              class=\"candidate-card\"\n              [class]=\"'status-' + candidate.status\"\n              (click)=\"selectCandidate(candidate)\">\n              <div class=\"candidate-header\">\n                <div class=\"candidate-info\">\n                  <h3 class=\"candidate-name\">{{ candidate.candidateName }}</h3>\n                  <p class=\"candidate-position\">{{ candidate.position }}</p>\n                </div>\n                <div class=\"candidate-status\">\n                  <span class=\"status-badge\" [class]=\"'status-' + candidate.status\">\n                    {{ candidate.status | titlecase }}\n                  </span>\n                </div>\n              </div>\n              \n              <div class=\"candidate-summary\">\n                <div class=\"summary-item\">\n                  <i class=\"icon-star\"></i>\n                  <span>{{ getOverallScore(candidate) }}/10</span>\n                </div>\n                <div class=\"summary-item\">\n                  <i class=\"icon-calendar\"></i>\n                  <span>{{ candidate.submittedAt | date:'short' }}</span>\n                </div>\n                <div class=\"summary-item\" *ngIf=\"candidate.reviewDeadline\">\n                  <i class=\"icon-clock\"></i>\n                  <span>Due {{ candidate.reviewDeadline | date:'short' }}</span>\n                </div>\n              </div>\n              \n              <div class=\"candidate-actions\">\n                <button class=\"action-btn small\" (click)=\"viewCandidate(candidate); $event.stopPropagation()\">\n                  <i class=\"icon-eye\"></i>\n                  Review\n                </button>\n                <button class=\"action-btn small\" (click)=\"scheduleInterview(candidate); $event.stopPropagation()\" \n                        *ngIf=\"config().permissions.canScheduleInterviews\">\n                  <i class=\"icon-video\"></i>\n                  Interview\n                </button>\n                <button class=\"action-btn small\" (click)=\"provideFeedback(candidate); $event.stopPropagation()\" \n                        *ngIf=\"config().permissions.canRateCandidates\">\n                  <i class=\"icon-message\"></i>\n                  Feedback\n                </button>\n              </div>\n            </div>\n          </div>\n          \n          <div class=\"empty-state\" *ngIf=\"filteredCandidates().length === 0\">\n            <i class=\"icon-users\"></i>\n            <h3>No candidates found</h3>\n            <p>There are no candidates matching your current filters.</p>\n          </div>\n        </div>\n\n        <!-- Live Sessions Tab -->\n        <div class=\"tab-content\" *ngIf=\"activeTab() === 'sessions'\">\n          <div class=\"content-header\">\n            <h2>Live Sessions</h2>\n            <button class=\"action-btn primary\" (click)=\"createSession()\">\n              <i class=\"icon-plus\"></i>\n              Create Session\n            </button>\n          </div>\n          \n          <div class=\"sessions-list\">\n            <div \n              *ngFor=\"let session of liveSessions(); trackBy: trackBySessionId\"\n              class=\"session-card\"\n              [class]=\"'status-' + session.status\">\n              <div class=\"session-header\">\n                <div class=\"session-info\">\n                  <h3 class=\"session-title\">{{ session.title }}</h3>\n                  <p class=\"session-type\">{{ session.type | titlecase }}</p>\n                </div>\n                <div class=\"session-status\">\n                  <span class=\"status-badge\" [class]=\"'status-' + session.status\">\n                    {{ session.status | titlecase }}\n                  </span>\n                </div>\n              </div>\n              \n              <div class=\"session-details\">\n                <div class=\"detail-item\">\n                  <i class=\"icon-calendar\"></i>\n                  <span>{{ session.scheduledAt | date:'medium' }}</span>\n                </div>\n                <div class=\"detail-item\">\n                  <i class=\"icon-users\"></i>\n                  <span>{{ session.participants.length }} participants</span>\n                </div>\n                <div class=\"detail-item\" *ngIf=\"session.agenda\">\n                  <i class=\"icon-list\"></i>\n                  <span>{{ session.agenda.length }} agenda items</span>\n                </div>\n              </div>\n              \n              <div class=\"session-participants\">\n                <div class=\"participant-avatars\">\n                  <img \n                    *ngFor=\"let participant of session.participants.slice(0, 4)\"\n                    [src]=\"getParticipantAvatar(participant)\"\n                    [alt]=\"participant.name\"\n                    class=\"participant-avatar\"\n                    [class.online]=\"participant.isOnline\"\n                    [title]=\"participant.name\">\n                  <div class=\"more-participants\" *ngIf=\"session.participants.length > 4\">\n                    +{{ session.participants.length - 4 }}\n                  </div>\n                </div>\n              </div>\n              \n              <div class=\"session-actions\">\n                <button class=\"action-btn\" (click)=\"joinSession(session)\" *ngIf=\"session.status === 'active'\">\n                  <i class=\"icon-video\"></i>\n                  Join\n                </button>\n                <button class=\"action-btn\" (click)=\"viewRecording(session)\" *ngIf=\"session.recordings && session.recordings.length > 0\">\n                  <i class=\"icon-play\"></i>\n                  Recording\n                </button>\n                <button class=\"action-btn\" (click)=\"editSession(session)\" *ngIf=\"session.status === 'scheduled'\">\n                  <i class=\"icon-edit\"></i>\n                  Edit\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Reports Tab -->\n        <div class=\"tab-content\" *ngIf=\"activeTab() === 'reports'\">\n          <div class=\"content-header\">\n            <h2>Reports & Analytics</h2>\n            <div class=\"report-filters\">\n              <select [(ngModel)]=\"reportPeriod\" class=\"filter-select\">\n                <option value=\"week\">Last Week</option>\n                <option value=\"month\">Last Month</option>\n                <option value=\"quarter\">Last Quarter</option>\n                <option value=\"year\">Last Year</option>\n              </select>\n              <button class=\"action-btn\" (click)=\"exportReport()\">\n                <i class=\"icon-download\"></i>\n                Export\n              </button>\n            </div>\n          </div>\n          \n          <div class=\"analytics-dashboard\">\n            <div class=\"analytics-grid\">\n              <div class=\"metric-card\">\n                <div class=\"metric-header\">\n                  <h3>Total Candidates</h3>\n                  <i class=\"icon-users\"></i>\n                </div>\n                <div class=\"metric-value\">{{ analytics().overview.totalCandidates }}</div>\n                <div class=\"metric-change positive\">+12% from last period</div>\n              </div>\n              \n              <div class=\"metric-card\">\n                <div class=\"metric-header\">\n                  <h3>Under Review</h3>\n                  <i class=\"icon-eye\"></i>\n                </div>\n                <div class=\"metric-value\">{{ analytics().overview.candidatesUnderReview }}</div>\n                <div class=\"metric-change neutral\">{{ analytics().overview.pendingFeedback }} pending feedback</div>\n              </div>\n              \n              <div class=\"metric-card\">\n                <div class=\"metric-header\">\n                  <h3>Avg Review Time</h3>\n                  <i class=\"icon-clock\"></i>\n                </div>\n                <div class=\"metric-value\">{{ analytics().overview.averageReviewTime }}h</div>\n                <div class=\"metric-change negative\">+2h from last period</div>\n              </div>\n              \n              <div class=\"metric-card\">\n                <div class=\"metric-header\">\n                  <h3>Satisfaction</h3>\n                  <i class=\"icon-star\"></i>\n                </div>\n                <div class=\"metric-value\">{{ analytics().overview.clientSatisfactionScore }}/10</div>\n                <div class=\"metric-change positive\">+0.3 from last period</div>\n              </div>\n            </div>\n            \n            <div class=\"charts-section\">\n              <div class=\"chart-card\">\n                <h3>Candidate Pipeline</h3>\n                <div class=\"pipeline-chart\">\n                  <!-- Chart would be implemented with a charting library -->\n                  <div class=\"chart-placeholder\">\n                    <p>Pipeline visualization would go here</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div class=\"chart-card\">\n                <h3>Client Engagement</h3>\n                <div class=\"engagement-metrics\">\n                  <div class=\"engagement-item\">\n                    <span class=\"metric-label\">Login Frequency</span>\n                    <span class=\"metric-value\">{{ analytics().engagement.loginFrequency }}/week</span>\n                  </div>\n                  <div class=\"engagement-item\">\n                    <span class=\"metric-label\">Avg Session Duration</span>\n                    <span class=\"metric-value\">{{ analytics().engagement.avgSessionDuration }}min</span>\n                  </div>\n                  <div class=\"engagement-item\">\n                    <span class=\"metric-label\">Features Used</span>\n                    <span class=\"metric-value\">{{ analytics().engagement.featuresUsed.length }}/7</span>\n                  </div>\n                  <div class=\"engagement-item\">\n                    <span class=\"metric-label\">Response Rate</span>\n                    <span class=\"metric-value\">{{ analytics().engagement.feedbackResponseRate }}%</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Messages Tab -->\n        <div class=\"tab-content\" *ngIf=\"activeTab() === 'messages'\">\n          <div class=\"content-header\">\n            <h2>Messages</h2>\n            <button class=\"action-btn primary\" (click)=\"composeMessage()\">\n              <i class=\"icon-plus\"></i>\n              New Message\n            </button>\n          </div>\n          \n          <div class=\"messages-container\">\n            <div class=\"messages-sidebar\">\n              <div class=\"conversation-list\">\n                <div \n                  *ngFor=\"let conversation of conversations()\"\n                  class=\"conversation-item\"\n                  [class.active]=\"selectedConversation()?.id === conversation.id\"\n                  [class.unread]=\"conversation.unreadCount > 0\"\n                  (click)=\"selectConversation(conversation)\">\n                  <div class=\"conversation-avatar\">\n                    <img [src]=\"conversation.avatar || '/assets/default-avatar.png'\" [alt]=\"conversation.name\">\n                    <div class=\"online-indicator\" *ngIf=\"conversation.isOnline\"></div>\n                  </div>\n                  <div class=\"conversation-info\">\n                    <div class=\"conversation-name\">{{ conversation.name }}</div>\n                    <div class=\"conversation-preview\">{{ conversation.lastMessage }}</div>\n                    <div class=\"conversation-time\">{{ conversation.lastMessageTime | date:'short' }}</div>\n                  </div>\n                  <div class=\"conversation-badge\" *ngIf=\"conversation.unreadCount > 0\">\n                    {{ conversation.unreadCount }}\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"messages-main\" *ngIf=\"selectedConversation()\">\n              <div class=\"conversation-header\">\n                <div class=\"conversation-info\">\n                  <img [src]=\"selectedConversation()!.avatar || '/assets/default-avatar.png'\" [alt]=\"selectedConversation()!.name\">\n                  <div>\n                    <h3>{{ selectedConversation()!.name }}</h3>\n                    <p>{{ selectedConversation()!.role }}</p>\n                  </div>\n                </div>\n                <div class=\"conversation-actions\">\n                  <button class=\"action-btn\" (click)=\"startVideoCall()\">\n                    <i class=\"icon-video\"></i>\n                  </button>\n                  <button class=\"action-btn\" (click)=\"shareScreen()\">\n                    <i class=\"icon-screen\"></i>\n                  </button>\n                </div>\n              </div>\n              \n              <!-- Messages would be implemented using the real-time messaging component -->\n              <div class=\"messages-placeholder\">\n                <p>Real-time messaging component would be integrated here</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <!-- Floating Action Button -->\n      <div class=\"floating-actions\">\n        <button class=\"fab\" (click)=\"toggleQuickActions()\" [class.active]=\"showQuickActions()\">\n          <i class=\"icon-plus\"></i>\n        </button>\n        <div class=\"quick-actions\" *ngIf=\"showQuickActions()\" [@slideUp]>\n          <button class=\"quick-action\" (click)=\"quickSchedule()\">\n            <i class=\"icon-calendar\"></i>\n            <span>Schedule</span>\n          </button>\n          <button class=\"quick-action\" (click)=\"quickMessage()\">\n            <i class=\"icon-message\"></i>\n            <span>Message</span>\n          </button>\n          <button class=\"quick-action\" (click)=\"quickFeedback()\">\n            <i class=\"icon-star\"></i>\n            <span>Feedback</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./client-portal.component.scss'],\n  animations: [\n    // Add animations here\n  ]\n})\nexport class ClientPortalComponent implements OnInit, OnDestroy {\n  // Inputs\n  config = input.required<ClientPortalConfig>();\n  \n  private destroy$ = new Subject<void>();\n  \n  // Services\n  private webSocketService = inject(WebSocketService);\n  private collaborationService = inject(CollaborationService);\n  private videoService = inject(VideoCollaborationService);\n  private notificationService = inject(NotificationService);\n\n  // State signals\n  activeTab = signal<string>('candidates');\n  candidates = signal<CandidatePresentation[]>([]);\n  liveSessions = signal<LiveSession[]>([]);\n  analytics = signal<PortalAnalytics>(this.getDefaultAnalytics());\n  notifications = signal<any[]>([]);\n  conversations = signal<any[]>([]);\n  selectedConversation = signal<any>(null);\n  \n  // UI state\n  isLoading = signal<boolean>(false);\n  showNotifications = signal<boolean>(false);\n  showUserMenu = signal<boolean>(false);\n  showQuickActions = signal<boolean>(false);\n  \n  // Filter states\n  candidateFilter = 'all';\n  searchQuery = '';\n  reportPeriod = 'month';\n  \n  // Current user (would come from auth service)\n  currentUser = signal({\n    id: 'client-user-1',\n    name: 'John Smith',\n    email: 'john.smith@client.com',\n    role: 'Hiring Manager',\n    avatar: '/assets/client-avatar.jpg'\n  });\n\n  // Computed properties\n  availableTabs = computed(() => {\n    const features = this.config().features;\n    const tabs = [];\n    \n    if (features.candidateReview) {\n      tabs.push({\n        id: 'candidates',\n        label: 'Candidates',\n        icon: 'icon-users',\n        enabled: true,\n        badge: this.candidates().filter(c => c.status === 'pending_review').length\n      });\n    }\n    \n    if (features.liveInterviews) {\n      tabs.push({\n        id: 'sessions',\n        label: 'Live Sessions',\n        icon: 'icon-video',\n        enabled: true,\n        badge: this.liveSessions().filter(s => s.status === 'active').length\n      });\n    }\n    \n    if (features.reports) {\n      tabs.push({\n        id: 'reports',\n        label: 'Reports',\n        icon: 'icon-chart',\n        enabled: true,\n        badge: 0\n      });\n    }\n    \n    if (features.messaging) {\n      tabs.push({\n        id: 'messages',\n        label: 'Messages',\n        icon: 'icon-message',\n        enabled: true,\n        badge: this.conversations().reduce((sum, c) => sum + c.unreadCount, 0)\n      });\n    }\n    \n    return tabs;\n  });\n\n  filteredCandidates = computed(() => {\n    let filtered = this.candidates();\n    \n    // Apply status filter\n    if (this.candidateFilter !== 'all') {\n      filtered = filtered.filter(c => {\n        switch (this.candidateFilter) {\n          case 'pending':\n            return c.status === 'pending_review';\n          case 'shortlisted':\n            return c.status === 'shortlisted';\n          case 'interviewed':\n            return c.interviewSchedule && c.interviewSchedule.some(i => i.status === 'completed');\n          default:\n            return true;\n        }\n      });\n    }\n    \n    // Apply search filter\n    if (this.searchQuery.trim()) {\n      const query = this.searchQuery.toLowerCase();\n      filtered = filtered.filter(c => \n        c.candidateName.toLowerCase().includes(query) ||\n        c.position.toLowerCase().includes(query)\n      );\n    }\n    \n    return filtered;\n  });\n\n  unreadNotifications = computed(() => {\n    return this.notifications().filter(n => n.status === 'unread').length;\n  });\n\n  recentNotifications = computed(() => {\n    return this.notifications().slice(0, 10);\n  });\n\n  ngOnInit() {\n    this.initializePortal();\n    this.loadInitialData();\n    this.setupRealTimeUpdates();\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private initializePortal() {\n    // Set default active tab based on available features\n    const firstAvailableTab = this.availableTabs().find(tab => tab.enabled);\n    if (firstAvailableTab) {\n      this.activeTab.set(firstAvailableTab.id);\n    }\n  }\n\n  private async loadInitialData() {\n    this.isLoading.set(true);\n    \n    try {\n      await Promise.all([\n        this.loadCandidates(),\n        this.loadLiveSessions(),\n        this.loadAnalytics(),\n        this.loadNotifications(),\n        this.loadConversations()\n      ]);\n    } catch (error) {\n      console.error('Failed to load initial data:', error);\n    } finally {\n      this.isLoading.set(false);\n    }\n  }\n\n  private setupRealTimeUpdates() {\n    // Connect to WebSocket for real-time updates\n    const clientRoomId = `client_${this.config().clientId}`;\n    \n    this.webSocketService.connect(clientRoomId)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(message => {\n        this.handleRealTimeUpdate(message);\n      });\n  }\n\n  private handleRealTimeUpdate(message: any) {\n    switch (message.type) {\n      case 'candidate_update':\n        this.updateCandidate(message.data);\n        break;\n      case 'session_update':\n        this.updateSession(message.data);\n        break;\n      case 'new_notification':\n        this.addNotification(message.data);\n        break;\n      case 'new_message':\n        this.addMessage(message.data);\n        break;\n    }\n  }\n\n  // Data loading methods\n  private async loadCandidates() {\n    // Mock data - in real implementation, this would call an API\n    const candidates: CandidatePresentation[] = [\n      {\n        id: 'candidate-1',\n        candidateId: 'cand-001',\n        candidateName: 'Alice Johnson',\n        position: 'Senior Frontend Developer',\n        status: 'pending_review',\n        submittedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n        reviewDeadline: new Date(Date.now() + 24 * 60 * 60 * 1000),\n        documents: [\n          {\n            id: 'doc-1',\n            type: 'resume',\n            filename: 'alice_johnson_resume.pdf',\n            url: '/files/resumes/alice_johnson_resume.pdf',\n            uploadedAt: new Date(),\n            size: 245760\n          }\n        ],\n        evaluations: [\n          {\n            id: 'eval-1',\n            category: 'technical',\n            score: 8.5,\n            feedback: 'Strong technical skills in React and TypeScript',\n            evaluatorId: 'recruiter-1',\n            evaluatorName: 'Sarah Chen',\n            evaluatedAt: new Date(),\n            criteria: [\n              { name: 'JavaScript/TypeScript', score: 9, weight: 0.3 },\n              { name: 'React/Angular', score: 8, weight: 0.3 },\n              { name: 'Problem Solving', score: 8, weight: 0.4 }\n            ]\n          }\n        ],\n        recommendation: {\n          decision: 'recommend',\n          confidence: 85,\n          reasoning: 'Excellent technical skills and relevant experience',\n          strengths: ['Strong React skills', 'Good problem-solving abilities', 'Team collaboration'],\n          concerns: ['Limited backend experience'],\n          nextSteps: ['Technical interview', 'Team fit assessment']\n        }\n      },\n      // Add more mock candidates...\n    ];\n    \n    this.candidates.set(candidates);\n  }\n\n  private async loadLiveSessions() {\n    // Mock data\n    const sessions: LiveSession[] = [\n      {\n        id: 'session-1',\n        type: 'candidate_presentation',\n        title: 'Alice Johnson - Technical Discussion',\n        participants: [\n          { userId: 'client-1', name: 'John Smith', role: 'client', isOnline: true },\n          { userId: 'recruiter-1', name: 'Sarah Chen', role: 'recruiter', isOnline: true },\n          { userId: 'candidate-1', name: 'Alice Johnson', role: 'candidate', isOnline: false }\n        ],\n        status: 'scheduled',\n        scheduledAt: new Date(Date.now() + 2 * 60 * 60 * 1000),\n        agenda: [\n          'Introduction and background',\n          'Technical experience review',\n          'Code walkthrough',\n          'Q&A session'\n        ]\n      }\n    ];\n    \n    this.liveSessions.set(sessions);\n  }\n\n  private async loadAnalytics() {\n    // Mock analytics data\n    const analytics: PortalAnalytics = {\n      overview: {\n        totalCandidates: 24,\n        candidatesUnderReview: 8,\n        pendingFeedback: 3,\n        averageReviewTime: 18.5,\n        clientSatisfactionScore: 8.7\n      },\n      engagement: {\n        loginFrequency: 4.2,\n        avgSessionDuration: 32,\n        featuresUsed: ['candidateReview', 'messaging', 'liveInterviews'],\n        feedbackResponseRate: 87\n      },\n      performance: {\n        timeToFeedback: 6.2,\n        decisionSpeed: 12.8,\n        interviewSchedulingTime: 4.1,\n        clientResponseRate: 94\n      }\n    };\n    \n    this.analytics.set(analytics);\n  }\n\n  private async loadNotifications() {\n    // Mock notifications\n    const notifications = [\n      {\n        id: 'notif-1',\n        type: 'candidate_ready',\n        title: 'New candidate ready for review',\n        message: 'Alice Johnson has been submitted for your review',\n        timestamp: new Date(Date.now() - 30 * 60 * 1000),\n        status: 'unread'\n      },\n      {\n        id: 'notif-2',\n        type: 'interview_scheduled',\n        title: 'Interview scheduled',\n        message: 'Technical interview with Bob Wilson scheduled for tomorrow',\n        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n        status: 'read'\n      }\n    ];\n    \n    this.notifications.set(notifications);\n  }\n\n  private async loadConversations() {\n    // Mock conversations\n    const conversations = [\n      {\n        id: 'conv-1',\n        name: 'Sarah Chen',\n        role: 'Recruiter',\n        avatar: '/assets/recruiter-avatar.jpg',\n        isOnline: true,\n        lastMessage: 'The candidate interview went well',\n        lastMessageTime: new Date(Date.now() - 15 * 60 * 1000),\n        unreadCount: 2\n      },\n      {\n        id: 'conv-2',\n        name: 'Mike Johnson',\n        role: 'Technical Lead',\n        avatar: '/assets/tech-lead-avatar.jpg',\n        isOnline: false,\n        lastMessage: 'I have some concerns about the technical assessment',\n        lastMessageTime: new Date(Date.now() - 2 * 60 * 60 * 1000),\n        unreadCount: 0\n      }\n    ];\n    \n    this.conversations.set(conversations);\n  }\n\n  // Update methods\n  private updateCandidate(candidateData: any) {\n    const currentCandidates = this.candidates();\n    const updatedCandidates = currentCandidates.map(candidate => \n      candidate.id === candidateData.id ? { ...candidate, ...candidateData } : candidate\n    );\n    this.candidates.set(updatedCandidates);\n  }\n\n  private updateSession(sessionData: any) {\n    const currentSessions = this.liveSessions();\n    const updatedSessions = currentSessions.map(session => \n      session.id === sessionData.id ? { ...session, ...sessionData } : session\n    );\n    this.liveSessions.set(updatedSessions);\n  }\n\n  private addNotification(notification: any) {\n    const currentNotifications = this.notifications();\n    this.notifications.set([notification, ...currentNotifications]);\n  }\n\n  private addMessage(messageData: any) {\n    // Update conversation with new message\n    const currentConversations = this.conversations();\n    const updatedConversations = currentConversations.map(conv => {\n      if (conv.id === messageData.conversationId) {\n        return {\n          ...conv,\n          lastMessage: messageData.content,\n          lastMessageTime: messageData.timestamp,\n          unreadCount: conv.unreadCount + 1\n        };\n      }\n      return conv;\n    });\n    this.conversations.set(updatedConversations);\n  }\n\n  // User interaction methods\n  setActiveTab(tabId: string) {\n    this.activeTab.set(tabId);\n  }\n\n  toggleNotifications() {\n    this.showNotifications.set(!this.showNotifications());\n    this.showUserMenu.set(false);\n  }\n\n  toggleUserMenu() {\n    this.showUserMenu.set(!this.showUserMenu());\n    this.showNotifications.set(false);\n  }\n\n  toggleQuickActions() {\n    this.showQuickActions.set(!this.showQuickActions());\n  }\n\n  markAllRead() {\n    const updatedNotifications = this.notifications().map(n => ({ ...n, status: 'read' }));\n    this.notifications.set(updatedNotifications);\n  }\n\n  async refreshData() {\n    await this.loadInitialData();\n  }\n\n  selectCandidate(candidate: CandidatePresentation) {\n    // Navigate to candidate detail view\n    console.log('Selected candidate:', candidate);\n  }\n\n  viewCandidate(candidate: CandidatePresentation) {\n    // Open candidate review modal/page\n    console.log('Viewing candidate:', candidate);\n  }\n\n  scheduleInterview(candidate: CandidatePresentation) {\n    // Open interview scheduling modal\n    console.log('Scheduling interview for:', candidate);\n  }\n\n  provideFeedback(candidate: CandidatePresentation) {\n    // Open feedback form\n    console.log('Providing feedback for:', candidate);\n  }\n\n  joinSession(session: LiveSession) {\n    // Join video session\n    console.log('Joining session:', session);\n  }\n\n  viewRecording(session: LiveSession) {\n    // View session recording\n    console.log('Viewing recording for:', session);\n  }\n\n  editSession(session: LiveSession) {\n    // Edit session details\n    console.log('Editing session:', session);\n  }\n\n  createSession() {\n    // Create new live session\n    console.log('Creating new session');\n  }\n\n  exportReport() {\n    // Export analytics report\n    console.log('Exporting report');\n  }\n\n  selectConversation(conversation: any) {\n    this.selectedConversation.set(conversation);\n    \n    // Mark conversation as read\n    if (conversation.unreadCount > 0) {\n      conversation.unreadCount = 0;\n      const updatedConversations = this.conversations().map(c => \n        c.id === conversation.id ? conversation : c\n      );\n      this.conversations.set(updatedConversations);\n    }\n  }\n\n  composeMessage() {\n    // Open message composition\n    console.log('Composing new message');\n  }\n\n  startVideoCall() {\n    // Start video call with selected conversation\n    console.log('Starting video call');\n  }\n\n  shareScreen() {\n    // Start screen sharing\n    console.log('Starting screen share');\n  }\n\n  scheduleMeeting() {\n    // Open meeting scheduler\n    console.log('Scheduling meeting');\n  }\n\n  quickSchedule() {\n    this.scheduleMeeting();\n    this.showQuickActions.set(false);\n  }\n\n  quickMessage() {\n    this.composeMessage();\n    this.showQuickActions.set(false);\n  }\n\n  quickFeedback() {\n    // Open quick feedback form\n    console.log('Quick feedback');\n    this.showQuickActions.set(false);\n  }\n\n  handleNotification(notification: any) {\n    // Handle notification click\n    notification.status = 'read';\n    console.log('Handling notification:', notification);\n  }\n\n  viewProfile() {\n    console.log('Viewing profile');\n  }\n\n  viewTeam() {\n    console.log('Viewing team');\n  }\n\n  viewPreferences() {\n    console.log('Viewing preferences');\n  }\n\n  logout() {\n    console.log('Logging out');\n  }\n\n  // Utility methods\n  getOverallScore(candidate: CandidatePresentation): number {\n    if (candidate.evaluations.length === 0) return 0;\n    \n    const totalScore = candidate.evaluations.reduce((sum, eval) => sum + eval.score, 0);\n    return Math.round((totalScore / candidate.evaluations.length) * 10) / 10;\n  }\n\n  getNotificationIcon(type: string): string {\n    const icons = {\n      candidate_ready: 'icon-user-plus',\n      interview_scheduled: 'icon-calendar',\n      feedback_request: 'icon-message-circle',\n      session_started: 'icon-video',\n      message_received: 'icon-message'\n    };\n    return icons[type as keyof typeof icons] || 'icon-bell';\n  }\n\n  getParticipantAvatar(participant: SessionParticipant): string {\n    // Generate avatar based on participant info\n    return `/assets/avatars/${participant.role}-avatar.jpg`;\n  }\n\n  private getDefaultAnalytics(): PortalAnalytics {\n    return {\n      overview: {\n        totalCandidates: 0,\n        candidatesUnderReview: 0,\n        pendingFeedback: 0,\n        averageReviewTime: 0,\n        clientSatisfactionScore: 0\n      },\n      engagement: {\n        loginFrequency: 0,\n        avgSessionDuration: 0,\n        featuresUsed: [],\n        feedbackResponseRate: 0\n      },\n      performance: {\n        timeToFeedback: 0,\n        decisionSpeed: 0,\n        interviewSchedulingTime: 0,\n        clientResponseRate: 0\n      }\n    };\n  }\n\n  // Track by functions for performance\n  trackByCandidateId(index: number, candidate: CandidatePresentation): string {\n    return candidate.id;\n  }\n\n  trackBySessionId(index: number, session: LiveSession): string {\n    return session.id;\n  }\n}