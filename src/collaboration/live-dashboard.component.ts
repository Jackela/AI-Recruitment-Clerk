import { Component, OnInit, OnDestroy, signal, computed, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Subject, takeUntil, interval, startWith, switchMap } from 'rxjs';\nimport { WebSocketService } from '../services/websocket.service';\nimport { CollaborationService } from '../services/collaboration.service';\nimport { PresenceService } from '../services/presence.service';\nimport { NotificationService } from '../services/notification.service';\n\ninterface TeamActivity {\n  id: string;\n  type: 'user_join' | 'user_leave' | 'document_edit' | 'comment' | 'vote' | 'decision' | 'status_change';\n  userId: string;\n  userName: string;\n  userAvatar?: string;\n  action: string;\n  contextId?: string;\n  contextType?: 'candidate' | 'job' | 'document' | 'decision';\n  timestamp: Date;\n  metadata?: any;\n}\n\ninterface UserPresence {\n  userId: string;\n  username: string;\n  email?: string;\n  avatar?: string;\n  role: 'hr_manager' | 'recruiter' | 'interviewer' | 'client' | 'admin';\n  status: 'online' | 'away' | 'busy' | 'offline';\n  currentPage?: string;\n  currentContext?: {\n    type: 'candidate' | 'job' | 'document' | 'meeting';\n    id: string;\n    title?: string;\n  };\n  lastActivity: Date;\n  isTyping?: {\n    contextId: string;\n    contextType: string;\n  };\n}\n\ninterface LiveMetrics {\n  activeUsers: number;\n  totalCandidatesProcessed: number;\n  activeDecisions: number;\n  averageResponseTime: number;\n  collaborationScore: number;\n  recentActivities: number;\n}\n\ninterface CollaborationRoom {\n  id: string;\n  name: string;\n  type: 'candidate_review' | 'job_planning' | 'team_meeting' | 'client_presentation';\n  participantCount: number;\n  lastActivity: Date;\n  status: 'active' | 'archived';\n  unreadMessages: number;\n}\n\n@Component({\n  selector: 'app-live-dashboard',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  template: `\n    <div class=\"live-dashboard\">\n      <!-- Header Section -->\n      <div class=\"dashboard-header\">\n        <div class=\"header-content\">\n          <h1 class=\"dashboard-title\">\n            <span class=\"live-indicator\"></span>\n            Team Collaboration Dashboard\n          </h1>\n          <div class=\"live-metrics\">\n            <div class=\"metric-card\">\n              <div class=\"metric-value\">{{ metrics().activeUsers }}</div>\n              <div class=\"metric-label\">Active Users</div>\n            </div>\n            <div class=\"metric-card\">\n              <div class=\"metric-value\">{{ metrics().activeDecisions }}</div>\n              <div class=\"metric-label\">Pending Decisions</div>\n            </div>\n            <div class=\"metric-card\">\n              <div class=\"metric-value\">{{ metrics().collaborationScore }}%</div>\n              <div class=\"metric-label\">Team Sync</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Main Dashboard Grid -->\n      <div class=\"dashboard-grid\">\n        <!-- Team Presence Panel -->\n        <div class=\"panel presence-panel\">\n          <div class=\"panel-header\">\n            <h3 class=\"panel-title\">\n              <i class=\"icon-users\"></i>\n              Team Presence ({{ teamPresence().length }})\n            </h3>\n            <div class=\"presence-filters\">\n              <button \n                *ngFor=\"let status of ['all', 'online', 'busy', 'away']\"\n                class=\"filter-btn\"\n                [class.active]=\"presenceFilter() === status\"\n                (click)=\"presenceFilter.set(status)\">\n                {{ status | titlecase }}\n              </button>\n            </div>\n          </div>\n          <div class=\"panel-content\">\n            <div class=\"presence-list\">\n              <div \n                *ngFor=\"let user of filteredPresence(); trackBy: trackByUserId\"\n                class=\"presence-item\"\n                [class]=\"'status-' + user.status\">\n                <div class=\"user-avatar\">\n                  <img [src]=\"user.avatar || '/assets/default-avatar.png'\" [alt]=\"user.username\">\n                  <div class=\"status-indicator\" [class]=\"'status-' + user.status\"></div>\n                </div>\n                <div class=\"user-info\">\n                  <div class=\"user-name\">{{ user.username }}</div>\n                  <div class=\"user-role\">{{ user.role | titlecase }}</div>\n                  <div class=\"user-activity\" *ngIf=\"user.currentContext\">\n                    <i class=\"icon-eye\"></i>\n                    {{ user.currentContext.type }}: {{ user.currentContext.title || user.currentContext.id }}\n                  </div>\n                  <div class=\"typing-indicator\" *ngIf=\"user.isTyping\">\n                    <div class=\"typing-dots\">\n                      <span></span><span></span><span></span>\n                    </div>\n                    typing in {{ user.isTyping.contextType }}...\n                  </div>\n                </div>\n                <div class=\"user-actions\">\n                  <button class=\"action-btn\" (click)=\"initiateDirectMessage(user.userId)\" title=\"Send Message\">\n                    <i class=\"icon-message\"></i>\n                  </button>\n                  <button class=\"action-btn\" (click)=\"startVideoCall(user.userId)\" title=\"Video Call\">\n                    <i class=\"icon-video\"></i>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Activity Feed Panel -->\n        <div class=\"panel activity-panel\">\n          <div class=\"panel-header\">\n            <h3 class=\"panel-title\">\n              <i class=\"icon-activity\"></i>\n              Live Activity Feed\n            </h3>\n            <div class=\"activity-controls\">\n              <select [(ngModel)]=\"activityFilter\" class=\"filter-select\">\n                <option value=\"all\">All Activities</option>\n                <option value=\"user_actions\">User Actions</option>\n                <option value=\"document_changes\">Document Changes</option>\n                <option value=\"decisions\">Decisions</option>\n              </select>\n              <button class=\"control-btn\" (click)=\"pauseActivityFeed()\" [class.active]=\"isPaused()\">\n                <i [class]=\"isPaused() ? 'icon-play' : 'icon-pause'\"></i>\n              </button>\n            </div>\n          </div>\n          <div class=\"panel-content\">\n            <div class=\"activity-feed\" #activityFeed>\n              <div \n                *ngFor=\"let activity of filteredActivities(); trackBy: trackByActivityId\"\n                class=\"activity-item\"\n                [class]=\"'activity-' + activity.type\">\n                <div class=\"activity-time\">{{ activity.timestamp | date:'short' }}</div>\n                <div class=\"activity-content\">\n                  <div class=\"activity-user\">\n                    <img [src]=\"activity.userAvatar || '/assets/default-avatar.png'\" [alt]=\"activity.userName\">\n                    <span class=\"user-name\">{{ activity.userName }}</span>\n                  </div>\n                  <div class=\"activity-description\">{{ activity.action }}</div>\n                  <div class=\"activity-context\" *ngIf=\"activity.contextType\">\n                    <i [class]=\"getContextIcon(activity.contextType)\"></i>\n                    {{ activity.contextType | titlecase }}\n                  </div>\n                </div>\n              </div>\n              <div *ngIf=\"filteredActivities().length === 0\" class=\"empty-state\">\n                <i class=\"icon-activity\"></i>\n                <p>No recent activity</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Active Rooms Panel -->\n        <div class=\"panel rooms-panel\">\n          <div class=\"panel-header\">\n            <h3 class=\"panel-title\">\n              <i class=\"icon-rooms\"></i>\n              Active Collaboration Rooms\n            </h3>\n            <button class=\"action-btn create-room-btn\" (click)=\"createNewRoom()\">\n              <i class=\"icon-plus\"></i>\n              New Room\n            </button>\n          </div>\n          <div class=\"panel-content\">\n            <div class=\"rooms-list\">\n              <div \n                *ngFor=\"let room of activeRooms(); trackBy: trackByRoomId\"\n                class=\"room-item\"\n                (click)=\"joinRoom(room.id)\">\n                <div class=\"room-icon\">\n                  <i [class]=\"getRoomIcon(room.type)\"></i>\n                </div>\n                <div class=\"room-info\">\n                  <div class=\"room-name\">{{ room.name }}</div>\n                  <div class=\"room-meta\">\n                    <span class=\"participant-count\">\n                      <i class=\"icon-users\"></i>\n                      {{ room.participantCount }}\n                    </span>\n                    <span class=\"last-activity\">{{ room.lastActivity | date:'short' }}</span>\n                  </div>\n                </div>\n                <div class=\"room-status\">\n                  <div class=\"status-badge\" [class]=\"'status-' + room.status\">{{ room.status }}</div>\n                  <div class=\"unread-count\" *ngIf=\"room.unreadMessages > 0\">\n                    {{ room.unreadMessages }}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Quick Actions Panel -->\n        <div class=\"panel actions-panel\">\n          <div class=\"panel-header\">\n            <h3 class=\"panel-title\">\n              <i class=\"icon-zap\"></i>\n              Quick Actions\n            </h3>\n          </div>\n          <div class=\"panel-content\">\n            <div class=\"action-grid\">\n              <button class=\"quick-action\" (click)=\"startTeamMeeting()\">\n                <i class=\"icon-video\"></i>\n                <span>Start Team Meeting</span>\n              </button>\n              <button class=\"quick-action\" (click)=\"createDecision()\">\n                <i class=\"icon-vote\"></i>\n                <span>Create Decision</span>\n              </button>\n              <button class=\"quick-action\" (click)=\"shareScreen()\">\n                <i class=\"icon-screen\"></i>\n                <span>Share Screen</span>\n              </button>\n              <button class=\"quick-action\" (click)=\"broadcastMessage()\">\n                <i class=\"icon-broadcast\"></i>\n                <span>Broadcast</span>\n              </button>\n              <button class=\"quick-action\" (click)=\"viewAnalytics()\">\n                <i class=\"icon-chart\"></i>\n                <span>Team Analytics</span>\n              </button>\n              <button class=\"quick-action\" (click)=\"exportReport()\">\n                <i class=\"icon-download\"></i>\n                <span>Export Report</span>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <!-- Notifications Panel -->\n        <div class=\"panel notifications-panel\">\n          <div class=\"panel-header\">\n            <h3 class=\"panel-title\">\n              <i class=\"icon-bell\"></i>\n              Notifications\n              <span class=\"notification-count\" *ngIf=\"unreadNotifications() > 0\">\n                {{ unreadNotifications() }}\n              </span>\n            </h3>\n            <button class=\"action-btn\" (click)=\"markAllNotificationsRead()\">\n              Mark All Read\n            </button>\n          </div>\n          <div class=\"panel-content\">\n            <div class=\"notifications-list\">\n              <div \n                *ngFor=\"let notification of recentNotifications(); trackBy: trackByNotificationId\"\n                class=\"notification-item\"\n                [class.unread]=\"notification.status !== 'read'\"\n                (click)=\"handleNotificationClick(notification)\">\n                <div class=\"notification-icon\">\n                  <i [class]=\"getNotificationIcon(notification.type)\"></i>\n                </div>\n                <div class=\"notification-content\">\n                  <div class=\"notification-title\">{{ notification.title }}</div>\n                  <div class=\"notification-text\">{{ notification.content }}</div>\n                  <div class=\"notification-time\">{{ notification.createdAt | date:'short' }}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./live-dashboard.component.scss']\n})\nexport class LiveDashboardComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private webSocketService = inject(WebSocketService);\n  private collaborationService = inject(CollaborationService);\n  private presenceService = inject(PresenceService);\n  private notificationService = inject(NotificationService);\n\n  // Signals for reactive state management\n  teamPresence = signal<UserPresence[]>([]);\n  activities = signal<TeamActivity[]>([]);\n  activeRooms = signal<CollaborationRoom[]>([]);\n  notifications = signal<any[]>([]);\n  metrics = signal<LiveMetrics>({\n    activeUsers: 0,\n    totalCandidatesProcessed: 0,\n    activeDecisions: 0,\n    averageResponseTime: 0,\n    collaborationScore: 0,\n    recentActivities: 0\n  });\n\n  // Filter states\n  presenceFilter = signal<string>('all');\n  activityFilter = 'all';\n  isPaused = signal<boolean>(false);\n\n  // Computed properties\n  filteredPresence = computed(() => {\n    const filter = this.presenceFilter();\n    const presence = this.teamPresence();\n    \n    if (filter === 'all') return presence;\n    return presence.filter(user => user.status === filter);\n  });\n\n  filteredActivities = computed(() => {\n    const activities = this.activities();\n    \n    switch (this.activityFilter) {\n      case 'user_actions':\n        return activities.filter(a => ['user_join', 'user_leave'].includes(a.type));\n      case 'document_changes':\n        return activities.filter(a => a.type === 'document_edit');\n      case 'decisions':\n        return activities.filter(a => ['vote', 'decision'].includes(a.type));\n      default:\n        return activities;\n    }\n  });\n\n  recentNotifications = computed(() => {\n    return this.notifications().slice(0, 10); // Show last 10 notifications\n  });\n\n  unreadNotifications = computed(() => {\n    return this.notifications().filter(n => n.status !== 'read').length;\n  });\n\n  ngOnInit() {\n    this.initializeRealTimeUpdates();\n    this.loadInitialData();\n    this.startMetricsUpdate();\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private initializeRealTimeUpdates() {\n    // Connect to WebSocket for real-time updates\n    const sessionId = this.generateSessionId();\n    \n    this.webSocketService.connect(sessionId)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(message => {\n        this.handleWebSocketMessage(message);\n      });\n\n    // Update presence every 30 seconds\n    interval(30000)\n      .pipe(\n        startWith(0),\n        switchMap(() => this.loadTeamPresence()),\n        takeUntil(this.destroy$)\n      )\n      .subscribe();\n\n    // Update activities every 10 seconds (if not paused)\n    interval(10000)\n      .pipe(\n        switchMap(() => this.isPaused() ? [] : this.loadRecentActivities()),\n        takeUntil(this.destroy$)\n      )\n      .subscribe();\n  }\n\n  private async loadInitialData() {\n    await Promise.all([\n      this.loadTeamPresence(),\n      this.loadRecentActivities(),\n      this.loadActiveRooms(),\n      this.loadNotifications(),\n      this.updateMetrics()\n    ]);\n  }\n\n  private async loadTeamPresence() {\n    try {\n      // In a real implementation, this would call the presence service\n      const presence = await this.presenceService.getRoomPresence('main_room');\n      this.teamPresence.set(presence);\n    } catch (error) {\n      console.error('Failed to load team presence:', error);\n    }\n  }\n\n  private async loadRecentActivities() {\n    try {\n      // Mock data - in real implementation, this would call an API\n      const activities: TeamActivity[] = [\n        {\n          id: '1',\n          type: 'user_join',\n          userId: 'user1',\n          userName: 'Sarah Chen',\n          action: 'joined the team collaboration',\n          timestamp: new Date(Date.now() - 5 * 60 * 1000),\n        },\n        {\n          id: '2',\n          type: 'document_edit',\n          userId: 'user2',\n          userName: 'Mike Johnson',\n          action: 'updated candidate profile',\n          contextType: 'candidate',\n          contextId: 'candidate-123',\n          timestamp: new Date(Date.now() - 10 * 60 * 1000),\n        },\n        {\n          id: '3',\n          type: 'vote',\n          userId: 'user3',\n          userName: 'Emma Wilson',\n          action: 'voted on hiring decision',\n          contextType: 'decision',\n          contextId: 'decision-456',\n          timestamp: new Date(Date.now() - 15 * 60 * 1000),\n        }\n      ];\n      \n      this.activities.set(activities);\n    } catch (error) {\n      console.error('Failed to load activities:', error);\n    }\n  }\n\n  private async loadActiveRooms() {\n    try {\n      // Mock data - in real implementation, this would call the collaboration service\n      const rooms: CollaborationRoom[] = [\n        {\n          id: 'room1',\n          name: 'Senior Developer Candidates',\n          type: 'candidate_review',\n          participantCount: 4,\n          lastActivity: new Date(Date.now() - 30 * 60 * 1000),\n          status: 'active',\n          unreadMessages: 3\n        },\n        {\n          id: 'room2',\n          name: 'Q4 Hiring Strategy',\n          type: 'job_planning',\n          participantCount: 6,\n          lastActivity: new Date(Date.now() - 60 * 60 * 1000),\n          status: 'active',\n          unreadMessages: 0\n        }\n      ];\n      \n      this.activeRooms.set(rooms);\n    } catch (error) {\n      console.error('Failed to load active rooms:', error);\n    }\n  }\n\n  private async loadNotifications() {\n    try {\n      // Mock data - in real implementation, this would call the notification service\n      const notifications = [\n        {\n          id: 'notif1',\n          type: 'mention',\n          title: 'You were mentioned',\n          content: 'Sarah Chen mentioned you in a comment',\n          status: 'unread',\n          createdAt: new Date(Date.now() - 5 * 60 * 1000)\n        },\n        {\n          id: 'notif2',\n          type: 'decision',\n          title: 'Decision requires your vote',\n          content: 'Hiring decision for John Doe needs your input',\n          status: 'unread',\n          createdAt: new Date(Date.now() - 15 * 60 * 1000)\n        }\n      ];\n      \n      this.notifications.set(notifications);\n    } catch (error) {\n      console.error('Failed to load notifications:', error);\n    }\n  }\n\n  private async updateMetrics() {\n    try {\n      const metrics: LiveMetrics = {\n        activeUsers: this.teamPresence().filter(u => u.status === 'online').length,\n        totalCandidatesProcessed: 142,\n        activeDecisions: 3,\n        averageResponseTime: 2.3,\n        collaborationScore: 87,\n        recentActivities: this.activities().length\n      };\n      \n      this.metrics.set(metrics);\n    } catch (error) {\n      console.error('Failed to update metrics:', error);\n    }\n  }\n\n  private startMetricsUpdate() {\n    interval(60000) // Update every minute\n      .pipe(\n        switchMap(() => this.updateMetrics()),\n        takeUntil(this.destroy$)\n      )\n      .subscribe();\n  }\n\n  private handleWebSocketMessage(message: any) {\n    switch (message.type) {\n      case 'presence_update':\n        this.updateUserPresence(message.data);\n        break;\n      case 'activity_update':\n        this.addActivity(message.data);\n        break;\n      case 'notification':\n        this.addNotification(message.data);\n        break;\n      case 'room_update':\n        this.updateRoom(message.data);\n        break;\n    }\n  }\n\n  private updateUserPresence(presenceData: any) {\n    const currentPresence = this.teamPresence();\n    const updatedPresence = currentPresence.map(user => \n      user.userId === presenceData.userId ? { ...user, ...presenceData } : user\n    );\n    \n    // Add new user if not exists\n    if (!currentPresence.some(u => u.userId === presenceData.userId)) {\n      updatedPresence.push(presenceData);\n    }\n    \n    this.teamPresence.set(updatedPresence);\n  }\n\n  private addActivity(activityData: TeamActivity) {\n    if (this.isPaused()) return;\n    \n    const currentActivities = this.activities();\n    const updatedActivities = [activityData, ...currentActivities].slice(0, 100); // Keep last 100\n    this.activities.set(updatedActivities);\n  }\n\n  private addNotification(notificationData: any) {\n    const currentNotifications = this.notifications();\n    const updatedNotifications = [notificationData, ...currentNotifications].slice(0, 50); // Keep last 50\n    this.notifications.set(updatedNotifications);\n  }\n\n  private updateRoom(roomData: any) {\n    const currentRooms = this.activeRooms();\n    const updatedRooms = currentRooms.map(room => \n      room.id === roomData.id ? { ...room, ...roomData } : room\n    );\n    this.activeRooms.set(updatedRooms);\n  }\n\n  // User interaction methods\n  initiateDirectMessage(userId: string) {\n    console.log('Starting direct message with user:', userId);\n    // Implementation would open a direct message window\n  }\n\n  startVideoCall(userId: string) {\n    console.log('Starting video call with user:', userId);\n    // Implementation would initiate a video call\n  }\n\n  joinRoom(roomId: string) {\n    console.log('Joining room:', roomId);\n    // Implementation would navigate to the collaboration room\n  }\n\n  createNewRoom() {\n    console.log('Creating new collaboration room');\n    // Implementation would open a room creation dialog\n  }\n\n  pauseActivityFeed() {\n    this.isPaused.set(!this.isPaused());\n  }\n\n  startTeamMeeting() {\n    console.log('Starting team meeting');\n    // Implementation would start a team video call\n  }\n\n  createDecision() {\n    console.log('Creating new decision');\n    // Implementation would open decision creation dialog\n  }\n\n  shareScreen() {\n    console.log('Starting screen share');\n    // Implementation would start screen sharing\n  }\n\n  broadcastMessage() {\n    console.log('Broadcasting message');\n    // Implementation would open broadcast message dialog\n  }\n\n  viewAnalytics() {\n    console.log('Viewing team analytics');\n    // Implementation would navigate to analytics page\n  }\n\n  exportReport() {\n    console.log('Exporting collaboration report');\n    // Implementation would generate and download a report\n  }\n\n  markAllNotificationsRead() {\n    const updated = this.notifications().map(n => ({ ...n, status: 'read' }));\n    this.notifications.set(updated);\n  }\n\n  handleNotificationClick(notification: any) {\n    console.log('Handling notification click:', notification);\n    // Mark as read and navigate to relevant context\n    notification.status = 'read';\n  }\n\n  // Utility methods\n  private generateSessionId(): string {\n    return `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  getContextIcon(contextType: string): string {\n    const icons = {\n      candidate: 'icon-user',\n      job: 'icon-briefcase',\n      document: 'icon-file',\n      decision: 'icon-vote',\n      meeting: 'icon-video'\n    };\n    return icons[contextType as keyof typeof icons] || 'icon-default';\n  }\n\n  getRoomIcon(roomType: string): string {\n    const icons = {\n      candidate_review: 'icon-user-check',\n      job_planning: 'icon-calendar',\n      team_meeting: 'icon-users',\n      client_presentation: 'icon-presentation'\n    };\n    return icons[roomType as keyof typeof icons] || 'icon-room';\n  }\n\n  getNotificationIcon(notificationType: string): string {\n    const icons = {\n      mention: 'icon-at',\n      comment: 'icon-message-circle',\n      vote: 'icon-vote',\n      decision: 'icon-check-circle',\n      message: 'icon-message',\n      system: 'icon-settings',\n      urgent: 'icon-alert'\n    };\n    return icons[notificationType as keyof typeof icons] || 'icon-bell';\n  }\n\n  // Track by functions for ngFor performance\n  trackByUserId(index: number, user: UserPresence): string {\n    return user.userId;\n  }\n\n  trackByActivityId(index: number, activity: TeamActivity): string {\n    return activity.id;\n  }\n\n  trackByRoomId(index: number, room: CollaborationRoom): string {\n    return room.id;\n  }\n\n  trackByNotificationId(index: number, notification: any): string {\n    return notification.id;\n  }\n}